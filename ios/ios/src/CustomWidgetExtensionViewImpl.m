//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSCustomWidgetExtension\src\main\java\com\ashera\customwidgetextension\CustomWidgetExtensionViewImpl.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "CustomWidgetExtensionViewImpl.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "View.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ASCustomWidgetExtensionViewImpl () {
 @public
  id<ASIWidget> w_;
  ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler *postMeasureEventHandler_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget;

- (void)setLinearGradientBackgroundWithASIWidget:(id<ASIWidget>)w
                                          withId:(id)objValue;

@end

J2OBJC_FIELD_SETTER(ASCustomWidgetExtensionViewImpl, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASCustomWidgetExtensionViewImpl, postMeasureEventHandler_, ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler *)

__attribute__((unused)) static void ASCustomWidgetExtensionViewImpl_initWithASIWidget_(ASCustomWidgetExtensionViewImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static ASCustomWidgetExtensionViewImpl *new_ASCustomWidgetExtensionViewImpl_initWithASIWidget_(id<ASIWidget> widget) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASCustomWidgetExtensionViewImpl *create_ASCustomWidgetExtensionViewImpl_initWithASIWidget_(id<ASIWidget> widget);

__attribute__((unused)) static void ASCustomWidgetExtensionViewImpl_setLinearGradientBackgroundWithASIWidget_withId_(ASCustomWidgetExtensionViewImpl *self, id<ASIWidget> w, id objValue);

@interface ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler () {
 @public
  id<ASIWidget> widget_;
}

@end

J2OBJC_FIELD_SETTER(ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler, widget_, id<ASIWidget>)

NSString *ASCustomWidgetExtensionViewImpl_LOCAL_NAME = @"CustomWidgetExtensionView";

@implementation ASCustomWidgetExtensionViewImpl

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ASCustomWidgetExtensionViewImpl_initWithASIWidget_(self, widget);
  return self;
}

- (NSString *)getLocalName {
  return ASCustomWidgetExtensionViewImpl_LOCAL_NAME;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASCustomWidgetExtensionViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<ASIAttributable>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  ASCustomWidgetExtensionViewImpl *newIntance = new_ASCustomWidgetExtensionViewImpl_initWithASIWidget_(widget);
  return newIntance;
}

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"linearGradientBackground"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"color"]);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w_)) asWidget], [ADView class]);
  id nativeWidget = [((id<ASIWidget>) nil_chk(w_)) asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"linearGradientBackground" }, 1)) {
    case 0:
    {
      ASCustomWidgetExtensionViewImpl_setLinearGradientBackgroundWithASIWidget_withId_(self, w_, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w_)) asWidget], [ADView class]);
  id nativeWidget = [((id<ASIWidget>) nil_chk(w_)) asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){  }, 0)) {
  }
  return nil;
}

- (void)setLinearGradientBackgroundWithASIWidget:(id<ASIWidget>)w
                                          withId:(id)objValue {
  ASCustomWidgetExtensionViewImpl_setLinearGradientBackgroundWithASIWidget_withId_(self, w, objValue);
}

+ (void)nativeSetFrameForCAGradientLayerWithId:(id)nativeWidget {
  ASCustomWidgetExtensionViewImpl_nativeSetFrameForCAGradientLayerWithId_(nativeWidget);
}

+ (void)nativeSetLinearGradientBackgroundWithId:(id)nativeWidget
                                         withId:(id)color1
                                         withId:(id)color2 {
  ASCustomWidgetExtensionViewImpl_nativeSetLinearGradientBackgroundWithId_withId_withId_(nativeWidget, color1, color2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIAttributable;", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:);
  methods[1].selector = @selector(getLocalName);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(newInstanceWithASIWidget:);
  methods[4].selector = @selector(loadAttributesWithNSString:);
  methods[5].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[6].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[7].selector = @selector(setLinearGradientBackgroundWithASIWidget:withId:);
  methods[8].selector = @selector(nativeSetFrameForCAGradientLayerWithId:);
  methods[9].selector = @selector(nativeSetLinearGradientBackgroundWithId:withId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "postMeasureEventHandler_", "LASCustomWidgetExtensionViewImpl_PostMeasureEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;", "newInstance", "loadAttributes", "LNSString;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setLinearGradientBackground", "LASIWidget;LNSObject;", "nativeSetFrameForCAGradientLayer", "LNSObject;", "nativeSetLinearGradientBackground", "LNSObject;LNSObject;LNSObject;", &ASCustomWidgetExtensionViewImpl_LOCAL_NAME, "LASCustomWidgetExtensionViewImpl_PostMeasureEventHandler;" };
  static const J2ObjcClassInfo _ASCustomWidgetExtensionViewImpl = { "CustomWidgetExtensionViewImpl", "com.ashera.customwidgetextension", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, 15, -1, -1, -1 };
  return &_ASCustomWidgetExtensionViewImpl;
}

@end

void ASCustomWidgetExtensionViewImpl_initWithASIWidget_(ASCustomWidgetExtensionViewImpl *self, id<ASIWidget> widget) {
  NSObject_init(self);
  self->w_ = widget;
}

ASCustomWidgetExtensionViewImpl *new_ASCustomWidgetExtensionViewImpl_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_NEW_IMPL(ASCustomWidgetExtensionViewImpl, initWithASIWidget_, widget)
}

ASCustomWidgetExtensionViewImpl *create_ASCustomWidgetExtensionViewImpl_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_CREATE_IMPL(ASCustomWidgetExtensionViewImpl, initWithASIWidget_, widget)
}

void ASCustomWidgetExtensionViewImpl_init(ASCustomWidgetExtensionViewImpl *self) {
  NSObject_init(self);
}

ASCustomWidgetExtensionViewImpl *new_ASCustomWidgetExtensionViewImpl_init() {
  J2OBJC_NEW_IMPL(ASCustomWidgetExtensionViewImpl, init)
}

ASCustomWidgetExtensionViewImpl *create_ASCustomWidgetExtensionViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASCustomWidgetExtensionViewImpl, init)
}

void ASCustomWidgetExtensionViewImpl_setLinearGradientBackgroundWithASIWidget_withId_(ASCustomWidgetExtensionViewImpl *self, id<ASIWidget> w, id objValue) {
  id color1 = [((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_())))) getWithInt:0];
  id color2 = [((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_())))) getWithInt:1];
  ASCustomWidgetExtensionViewImpl_nativeSetLinearGradientBackgroundWithId_withId_withId_([((id<ASIWidget>) nil_chk(w)) asNativeWidget], color1, color2);
  NSString *postMeasureEvent = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, postMeasure))) description];
  if (self->postMeasureEventHandler_ == nil) {
    self->postMeasureEventHandler_ = new_ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler_initWithNSString_withASIWidget_(postMeasureEvent, w);
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk([w getFragment])) getEventBus])) onWithNSString:postMeasureEvent withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->postMeasureEventHandler_ } count:1 type:ASEventBusHandler_class_()]];
  }
}

void ASCustomWidgetExtensionViewImpl_nativeSetFrameForCAGradientLayerWithId_(id nativeWidget) {
  ASCustomWidgetExtensionViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  for (CALayer *layer in view.layer.sublayers) {
    if ([layer isKindOfClass:[CAGradientLayer class]]) {
      layer.frame = CGRectMake(0, 0, view.bounds.size.width, view.bounds.size.height);
    }
  }
}

void ASCustomWidgetExtensionViewImpl_nativeSetLinearGradientBackgroundWithId_withId_withId_(id nativeWidget, id color1, id color2) {
  ASCustomWidgetExtensionViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  CAGradientLayer *gradient = [CAGradientLayer layer];
  gradient.colors = @[(id)((UIColor*) color1).CGColor, (id)((UIColor*) color2).CGColor];
  for (CALayer *layer in view.layer.sublayers) {
    if ([layer isKindOfClass:[CAGradientLayer class]]) {
      [layer removeFromSuperlayer];
    }
  }
  [view.layer insertSublayer:gradient atIndex:0];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCustomWidgetExtensionViewImpl)

J2OBJC_NAME_MAPPING(ASCustomWidgetExtensionViewImpl, "com.ashera.customwidgetextension", "AS")

@implementation ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler

- (instancetype)initWithNSString:(NSString *)type
                   withASIWidget:(id<ASIWidget>)widget {
  ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler_initWithNSString_withASIWidget_(self, type, widget);
  return self;
}

- (void)doPerformWithId:(id)payload {
  ASCustomWidgetExtensionViewImpl_nativeSetFrameForCAGradientLayerWithId_([((id<ASIWidget>) nil_chk(widget_)) asNativeWidget]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withASIWidget:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LASIWidget;", "doPerform", "LNSObject;", "LASCustomWidgetExtensionViewImpl;" };
  static const J2ObjcClassInfo _ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler = { "PostMeasureEventHandler", "com.ashera.customwidgetextension", ptrTable, methods, fields, 7, 0x18, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler;
}

@end

void ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler_initWithNSString_withASIWidget_(ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler *self, NSString *type, id<ASIWidget> widget) {
  ASEventBusHandler_initWithNSString_(self, type);
  self->widget_ = widget;
}

ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler *new_ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler_initWithNSString_withASIWidget_(NSString *type, id<ASIWidget> widget) {
  J2OBJC_NEW_IMPL(ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler, initWithNSString_withASIWidget_, type, widget)
}

ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler *create_ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler_initWithNSString_withASIWidget_(NSString *type, id<ASIWidget> widget) {
  J2OBJC_CREATE_IMPL(ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler, initWithNSString_withASIWidget_, type, widget)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCustomWidgetExtensionViewImpl_PostMeasureEventHandler)
